<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>Mihai&#39;s blog</title>
	<subtitle>phylosopher of computation</subtitle>
	
	<link href="https://saftacatalinmihai.github.io/11rblog/feed/feed.xml" rel="self"/>
	<link href="https://saftacatalinmihai.github.io/11rblog/"/>
	<updated>2021-02-06T00:00:00Z</updated>
	<id>https://example.com/</id>
	<author> 
		<name>Mihai Safta</name>
	</author>
	
	<entry>
		<title>Pure Functional Stream processing in Scala</title>
		<link href="https://saftacatalinmihai.github.io/11rblog/post/pure-functional-stream-processing-in-scala/"/>
		<updated>2021-02-06T00:00:00Z</updated>
		<id>https://saftacatalinmihai.github.io/11rblog/post/pure-functional-stream-processing-in-scala/</id>
		<content type="html">&lt;p&gt;In Scala you can write pure functional code, similar to Haskell or other pure functional languages, but you’re not obligated to. Wikipedia categories Scala as an impure Functional language.&lt;/p&gt;
&lt;p&gt;FP purists view this as a weakness of Scala, but others view the option of “cheating” pureness as an acceptable choice sometimes. Even if you can do everything purely, it’s sometimes a lot easier to think about the problem in a different paradigm.&lt;/p&gt;
&lt;p&gt;Pure FP is great for writing correct functions you can easily reason about in isolation and compose well with other pure functions. We can easily unit test them since pure functions only depend on their input arguments and always produce the same output for the same arguments – they are referentially transparent.&lt;/p&gt;
&lt;p&gt;This allows the programmer and the compiler to reason about program behavior as a rewrite system. This can help in proving correctness, simplifying an algorithm, help change code without breaking it, or optimizing code through memoization, common sub-expression elimination, lazy evaluation, or parallelization.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;There are, however, other approaches to thinking about compossibility of programs.&lt;/p&gt;
&lt;p&gt;One such approach is to think of software components as black boxes running a process.
They have a variable number of input and output ports which have Types associated to them.
Messages pass asynchronously from component to component after linking their corresponding ports together (if the types match).
We specify the connections outside the components themselves.
This is the thinking behind flow based programming.
(This is also how microservices work at a larger scale)&lt;/p&gt;
&lt;p&gt;My view is that these two ways of thinking about composable programs are not mutually exclusive and they can work together in synergy. I will try to make this case by the end of this post.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;pure-functional-programming-in-scala&quot; tabindex=&quot;-1&quot;&gt;Pure Functional Programming in Scala&lt;/h3&gt;
&lt;p&gt;Using Cats, you can use Type Classes: Functor, Applicative, Monad etc… to model your programs based on these highly general computational abstractions.
There are other ecosystems for pure FP in Scala. I chose Cats because I’m most familiar with it.&lt;/p&gt;
&lt;p&gt;Adding Cats-effect, you can also model IO in a pure functional way. The idea is to write the entire program, including all the effects like: calling external services, writing to file, pushing messages to queues, as a single composed expression that returns an IO data structure representing the action of running all these effects, without actually running them. You only execute them at the “end of the world” in the “main” method.&lt;/p&gt;
&lt;p&gt;This is a simple example of a pure functional program using cats-effect.&lt;/p&gt;
&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;cats&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;effect&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; IO&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Sync &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;cats&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;implicits&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;_&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;scala&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;StdIn&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt; App &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; getUserName&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;F&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;_&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Sync&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; F&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      _    &lt;span class=&quot;token keyword&quot;&gt;&amp;lt;-&lt;/span&gt; Sync&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;F&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;delay&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;println&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;What&#39;s your name?&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      name &lt;span class=&quot;token keyword&quot;&gt;&amp;lt;-&lt;/span&gt; Sync&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;F&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;delay&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;StdIn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;readLine&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;yield&lt;/span&gt; name&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; greatUser&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;F&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;_&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Sync&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; F&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br /&gt;    Sync&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;F&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;delay&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;println&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token string&quot;&gt;&quot;Hello $name!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; program&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;F&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;_&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Sync&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; F&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    name &lt;span class=&quot;token keyword&quot;&gt;&amp;lt;-&lt;/span&gt; getUserName&lt;br /&gt;    _    &lt;span class=&quot;token keyword&quot;&gt;&amp;lt;-&lt;/span&gt; greatUser&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;yield&lt;/span&gt; s&lt;span class=&quot;token string&quot;&gt;&quot;Greeted $name&quot;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; main&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;args&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    program&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;IO&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;unsafeRunSync&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Real programs will, of course, be much more complex, but it all boils down to a single IO value that combines all the effects of running the program which we execute in the “main” method.&lt;/p&gt;
&lt;p&gt;Runar has a great talk where he compares using pure FP and IO as working with unexploded TNT. That is much easier to work with as opposed to working with exploded TNT (by actually executing effects in each function).&lt;/p&gt;
&lt;h3 id=&quot;stream-processing-in-scala&quot; tabindex=&quot;-1&quot;&gt;Stream processing in Scala&lt;/h3&gt;
&lt;p&gt;Akka Streams implements the Reactive Streams protocol that’s now standardised in the JVM ecosystem.&lt;/p&gt;
&lt;p&gt;Streams have added benefits over simple functions by implementing flow control mechanisms which include back-pressure.&lt;/p&gt;
&lt;p&gt;You can think of streams as managed functions, similar to how the Operating System manages threads.&lt;/p&gt;
&lt;p&gt;A stream component can decide when to ask for more input messages to pass to its processing function, how many parallel calls to the function to allow, and whether to slow down processing because there is no demand from downstream functions.&lt;/p&gt;
&lt;p&gt;Akka is using the abstractions of Source, Flow, Sink for modeling streams.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
    &lt;img alt=&quot;source-flow-sink&quot; title=&quot;Source via Flow to Sink&quot; src=&quot;https://saftacatalinmihai.github.io/11rblog/SourceFlowSink-4.png&quot; /&gt;
&lt;/p&gt;
&lt;!-- ![source-flow-sink](/11rblog/SourceFlowSink-4.png &quot;Source via Flow to Sink&quot;) --&gt;</content>
	</entry>
	
	<entry>
		<title>Deadbeef Decrementation</title>
		<link href="https://saftacatalinmihai.github.io/11rblog/post/deadbeef-decrementation/"/>
		<updated>2016-10-09T00:00:00Z</updated>
		<id>https://saftacatalinmihai.github.io/11rblog/post/deadbeef-decrementation/</id>
		<content type="html">&lt;pre class=&quot;language-nasm&quot;&gt;&lt;code class=&quot;language-nasm&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;;run on Linux with: nasm -felf64 decrement.asm &amp;amp;&amp;amp; ld decrement.o &amp;amp;&amp;amp; ./a.out&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;global _start&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;section .text&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token label function&quot;&gt;_start:&lt;/span&gt;&lt;br /&gt;  mov &lt;span class=&quot;token register variable&quot;&gt;rax&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;0xDEADBEEF&lt;/span&gt;&lt;br /&gt;  call decrement&lt;br /&gt;  call exit&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token label function&quot;&gt;decrement:&lt;/span&gt;&lt;br /&gt;  dec &lt;span class=&quot;token register variable&quot;&gt;rax&lt;/span&gt;&lt;br /&gt;  cmp &lt;span class=&quot;token register variable&quot;&gt;rax&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;br /&gt;  jg decrement&lt;br /&gt;  ret&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token label function&quot;&gt;exit:&lt;/span&gt;&lt;br /&gt;  mov &lt;span class=&quot;token register variable&quot;&gt;rax&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;60&lt;/span&gt;&lt;br /&gt;  syscall&lt;br /&gt;&lt;span class=&quot;token string&quot;&gt;``&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
	
	<entry>
		<title>Interior Crocodile Alligator, I Drive a Chevrolet Movie Theater</title>
		<link href="https://saftacatalinmihai.github.io/11rblog/interior-crocodile-alligator/"/>
		<updated>2008-09-19T00:00:00Z</updated>
		<id>https://saftacatalinmihai.github.io/11rblog/interior-crocodile-alligator/</id>
		<content type="html">&lt;p&gt;To truly understand the captivating phenomenon that is the &lt;a href=&quot;https://www.youtube.com/watch?v=0OEbuDP5Yys&quot;&gt;Interior Crocodile Alligator song&lt;/a&gt;, you must be familiar with its &lt;a href=&quot;https://youtu.be/UXQ38gUsB20&quot;&gt;history&lt;/a&gt;.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Why My Practice of Thelema Makes Me Better at World of Warcraft</title>
		<link href="https://saftacatalinmihai.github.io/11rblog/post/why-my-practice-of-thelema-makes-me-better-at-world-of-warcraft/"/>
		<updated>1974-09-09T00:00:00Z</updated>
		<id>https://saftacatalinmihai.github.io/11rblog/post/why-my-practice-of-thelema-makes-me-better-at-world-of-warcraft/</id>
		<content type="html">&lt;p&gt;⛧⛧⛧&lt;/p&gt;
&lt;p&gt;ivil wea qep&lt;/p&gt;
&lt;p&gt;⛧⛧⛧&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Shrek Predicted the COVID-19 Pandemic</title>
		<link href="https://saftacatalinmihai.github.io/11rblog/post/shrek-predicted-the-covid-19-pandemic/"/>
		<updated>1921-04-16T00:00:00Z</updated>
		<id>https://saftacatalinmihai.github.io/11rblog/post/shrek-predicted-the-covid-19-pandemic/</id>
		<content type="html">&lt;p&gt;Please watch &lt;a href=&quot;https://youtu.be/dQw4w9WgXcQ&quot;&gt;this informational video&lt;/a&gt; to learn more.&lt;/p&gt;
&lt;p&gt;Thank you for your time.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Lorem Ipsum</title>
		<link href="https://saftacatalinmihai.github.io/11rblog/post/lorem-ipsum/"/>
		<updated>1918-11-04T00:00:00Z</updated>
		<id>https://saftacatalinmihai.github.io/11rblog/post/lorem-ipsum/</id>
		<content type="html">&lt;h3 id=&quot;lorem&quot; tabindex=&quot;-1&quot;&gt;Lorem&lt;/h3&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Congue quisque egestas diam in arcu cursus euismod quis. Ac auctor augue mauris augue. Convallis tellus id interdum velit laoreet id donec ultrices. Aliquam eleifend mi in nulla posuere. Pretium quam vulputate dignissim suspendisse in est. Orci sagittis eu volutpat odio facilisis mauris sit. Non nisi est sit amet facilisis magna etiam tempor. Id diam maecenas ultricies mi eget. Sed velit dignissim sodales ut. Purus semper eget duis at. Pellentesque sit amet porttitor eget dolor morbi. Faucibus a pellentesque sit amet porttitor. Orci a scelerisque purus semper eget duis. Mauris commodo quis imperdiet massa tincidunt. Pulvinar elementum integer enim neque. In vitae turpis massa sed elementum. Rhoncus dolor purus non enim.&lt;/p&gt;
&lt;h3 id=&quot;ipsum&quot; tabindex=&quot;-1&quot;&gt;Ipsum&lt;/h3&gt;
&lt;p&gt;Nunc non blandit massa enim nec dui nunc mattis enim. Lectus urna duis convallis convallis tellus. Maecenas volutpat blandit aliquam etiam. Vivamus arcu felis bibendum ut tristique et egestas quis. Amet aliquam id diam maecenas ultricies mi eget. In hac habitasse platea dictumst quisque sagittis purus sit. Non pulvinar neque laoreet suspendisse interdum consectetur libero id. Tempus imperdiet nulla malesuada pellentesque elit eget gravida cum sociis. Suscipit adipiscing bibendum est ultricies integer quis auctor elit. Adipiscing commodo elit at imperdiet dui accumsan sit amet. At augue eget arcu dictum varius duis. Purus viverra accumsan in nisl nisi. Ut pharetra sit amet aliquam.&lt;/p&gt;
&lt;h3 id=&quot;dolor&quot; tabindex=&quot;-1&quot;&gt;Dolor&lt;/h3&gt;
&lt;p&gt;Nunc id cursus metus aliquam eleifend mi in nulla posuere. In fermentum posuere urna nec tincidunt praesent. Imperdiet massa tincidunt nunc pulvinar sapien et. Morbi tristique senectus et netus et. At quis risus sed vulputate odio ut enim blandit volutpat. Consectetur a erat nam at lectus. Adipiscing diam donec adipiscing tristique risus nec feugiat in. Dictum varius duis at consectetur lorem donec massa sapien. Adipiscing tristique risus nec feugiat in. Amet cursus sit amet dictum sit amet justo donec enim. Ullamcorper dignissim cras tincidunt lobortis feugiat vivamus at augue eget. Condimentum lacinia quis vel eros. Tincidunt tortor aliquam nulla facilisi cras fermentum odio eu feugiat. Enim eu turpis egestas pretium aenean.&lt;/p&gt;
&lt;h3 id=&quot;sit&quot; tabindex=&quot;-1&quot;&gt;Sit&lt;/h3&gt;
&lt;p&gt;Gravida neque convallis a cras semper auctor. Viverra mauris in aliquam sem. Dui nunc mattis enim ut tellus elementum sagittis vitae. Viverra mauris in aliquam sem fringilla ut morbi tincidunt augue. Turpis cursus in hac habitasse platea dictumst quisque. Lectus quam id leo in vitae. Nibh venenatis cras sed felis eget velit. Ut ornare lectus sit amet. Iaculis nunc sed augue lacus viverra vitae congue. Lobortis feugiat vivamus at augue eget. At lectus urna duis convallis convallis tellus id interdum velit. Enim ut tellus elementum sagittis vitae et. Placerat in egestas erat imperdiet sed. Tempor orci eu lobortis elementum nibh. Tempus urna et pharetra pharetra. Ut aliquam purus sit amet luctus venenatis. Nisi porta lorem mollis aliquam ut porttitor. Nunc pulvinar sapien et ligula ullamcorper malesuada proin. Odio euismod lacinia at quis risus sed vulputate.&lt;/p&gt;
&lt;h3 id=&quot;amet&quot; tabindex=&quot;-1&quot;&gt;Amet&lt;/h3&gt;
&lt;p&gt;Risus nullam eget felis eget nunc lobortis. Malesuada fames ac turpis egestas integer eget aliquet nibh. Viverra accumsan in nisl nisi. Lorem ipsum dolor sit amet. Facilisis magna etiam tempor orci eu lobortis elementum nibh. Eu volutpat odio facilisis mauris sit amet. Arcu bibendum at varius vel pharetra vel turpis nunc. Et tortor consequat id porta nibh venenatis. In tellus integer feugiat scelerisque varius. Etiam non quam lacus suspendisse faucibus interdum posuere. Ac auctor augue mauris augue neque gravida. Faucibus et molestie ac feugiat sed lectus vestibulum mattis. Proin libero nunc consequat interdum varius. Luctus accumsan tortor posuere ac ut. Mauris a diam maecenas sed enim ut sem viverra aliquet. Fames ac turpis egestas integer eget aliquet nibh.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Son of Lorem Ipsum</title>
		<link href="https://saftacatalinmihai.github.io/11rblog/post/son-of-lorem-ipsum/"/>
		<updated>1908-12-12T00:00:00Z</updated>
		<id>https://saftacatalinmihai.github.io/11rblog/post/son-of-lorem-ipsum/</id>
		<content type="html">&lt;h3 id=&quot;lorem&quot; tabindex=&quot;-1&quot;&gt;Lorem&lt;/h3&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Congue quisque egestas diam in arcu cursus euismod quis. Ac auctor augue mauris augue. Convallis tellus id interdum velit laoreet id donec ultrices. Aliquam eleifend mi in nulla posuere. Pretium quam vulputate dignissim suspendisse in est. Orci sagittis eu volutpat odio facilisis mauris sit. Non nisi est sit amet facilisis magna etiam tempor. Id diam maecenas ultricies mi eget. Sed velit dignissim sodales ut. Purus semper eget duis at. Pellentesque sit amet porttitor eget dolor morbi. Faucibus a pellentesque sit amet porttitor. Orci a scelerisque purus semper eget duis. Mauris commodo quis imperdiet massa tincidunt. Pulvinar elementum integer enim neque. In vitae turpis massa sed elementum. Rhoncus dolor purus non enim.&lt;/p&gt;
&lt;h3 id=&quot;ipsum&quot; tabindex=&quot;-1&quot;&gt;Ipsum&lt;/h3&gt;
&lt;p&gt;Nunc non blandit massa enim nec dui nunc mattis enim. Lectus urna duis convallis convallis tellus. Maecenas volutpat blandit aliquam etiam. Vivamus arcu felis bibendum ut tristique et egestas quis. Amet aliquam id diam maecenas ultricies mi eget. In hac habitasse platea dictumst quisque sagittis purus sit. Non pulvinar neque laoreet suspendisse interdum consectetur libero id. Tempus imperdiet nulla malesuada pellentesque elit eget gravida cum sociis. Suscipit adipiscing bibendum est ultricies integer quis auctor elit. Adipiscing commodo elit at imperdiet dui accumsan sit amet. At augue eget arcu dictum varius duis. Purus viverra accumsan in nisl nisi. Ut pharetra sit amet aliquam.&lt;/p&gt;
&lt;h3 id=&quot;dolor&quot; tabindex=&quot;-1&quot;&gt;Dolor&lt;/h3&gt;
&lt;p&gt;Nunc id cursus metus aliquam eleifend mi in nulla posuere. In fermentum posuere urna nec tincidunt praesent. Imperdiet massa tincidunt nunc pulvinar sapien et. Morbi tristique senectus et netus et. At quis risus sed vulputate odio ut enim blandit volutpat. Consectetur a erat nam at lectus. Adipiscing diam donec adipiscing tristique risus nec feugiat in. Dictum varius duis at consectetur lorem donec massa sapien. Adipiscing tristique risus nec feugiat in. Amet cursus sit amet dictum sit amet justo donec enim. Ullamcorper dignissim cras tincidunt lobortis feugiat vivamus at augue eget. Condimentum lacinia quis vel eros. Tincidunt tortor aliquam nulla facilisi cras fermentum odio eu feugiat. Enim eu turpis egestas pretium aenean.&lt;/p&gt;
&lt;h3 id=&quot;sit&quot; tabindex=&quot;-1&quot;&gt;Sit&lt;/h3&gt;
&lt;p&gt;Gravida neque convallis a cras semper auctor. Viverra mauris in aliquam sem. Dui nunc mattis enim ut tellus elementum sagittis vitae. Viverra mauris in aliquam sem fringilla ut morbi tincidunt augue. Turpis cursus in hac habitasse platea dictumst quisque. Lectus quam id leo in vitae. Nibh venenatis cras sed felis eget velit. Ut ornare lectus sit amet. Iaculis nunc sed augue lacus viverra vitae congue. Lobortis feugiat vivamus at augue eget. At lectus urna duis convallis convallis tellus id interdum velit. Enim ut tellus elementum sagittis vitae et. Placerat in egestas erat imperdiet sed. Tempor orci eu lobortis elementum nibh. Tempus urna et pharetra pharetra. Ut aliquam purus sit amet luctus venenatis. Nisi porta lorem mollis aliquam ut porttitor. Nunc pulvinar sapien et ligula ullamcorper malesuada proin. Odio euismod lacinia at quis risus sed vulputate.&lt;/p&gt;
&lt;h3 id=&quot;amet&quot; tabindex=&quot;-1&quot;&gt;Amet&lt;/h3&gt;
&lt;p&gt;Risus nullam eget felis eget nunc lobortis. Malesuada fames ac turpis egestas integer eget aliquet nibh. Viverra accumsan in nisl nisi. Lorem ipsum dolor sit amet. Facilisis magna etiam tempor orci eu lobortis elementum nibh. Eu volutpat odio facilisis mauris sit amet. Arcu bibendum at varius vel pharetra vel turpis nunc. Et tortor consequat id porta nibh venenatis. In tellus integer feugiat scelerisque varius. Etiam non quam lacus suspendisse faucibus interdum posuere. Ac auctor augue mauris augue neque gravida. Faucibus et molestie ac feugiat sed lectus vestibulum mattis. Proin libero nunc consequat interdum varius. Luctus accumsan tortor posuere ac ut. Mauris a diam maecenas sed enim ut sem viverra aliquet. Fames ac turpis egestas integer eget aliquet nibh.&lt;/p&gt;
</content>
	</entry>
</feed>